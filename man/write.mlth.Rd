% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/write.R
\name{write.mlth}
\alias{write.mlth}
\alias{write}
\title{Write Multi-Header Data Frame to a File}
\usage{
write.mlth(x, file, sheetName = "Sheet1", row.names = TRUE, header = TRUE,
  append = FALSE, showNA = TRUE, digits = numeric(0),
  data.format = character(0), apa = FALSE, date.format = character(0),
  coord = c(1, 1), customStyles = NULL, noStyles = FALSE)
}
\arguments{
\item{x}{a \code{mlth.data.frame} object.}

\item{file}{the path to the output file.}

\item{sheetName}{the name of the spreadsheet to write the table.}

\item{row.names}{a logical value indicating if the row names are to be written.}

\item{append}{a logical value indicating if the table should be appended to an existing file.
If \code{TRUE} the file is read from disk.}

\item{showNA}{a logical value. If \code{FALSE}, NA values will be left blank.}

\item{digits}{a single integer value or an integer vector indicating the number of significant digits
to show.}

\item{data.format}{a character vector with Excel data format definitions (see Data Formats section).}

\item{apa}{a logical value inticating whether the table should be formatted according to the APA recomendation.}

\item{date.format}{a character vector with date formats (according to the Excel data format
definitions, see Data Formats section).}

\item{coord}{an integer vector indicating position of the top-left cell of the table on the spreadsheet
(row and column).}

\item{customStyles}{a list of the custom styles definitions (see Custom Styles section).}

\item{noStyles}{a logical value, when FALSE, the Excel styles are not used.}
}
\description{
Write a \code{mlth.data.frame} object to a file (Excel, csv etc). The function
has many options to define and apply Excel styles, write several tables 
into the same file or same spreadsheet etc. The methods to write into other than Excel
formats are to be implemented.
}
\details{
Unlike \code{\link[xlsx]{write.xlsx}}, \code{write.mlth} does not 
rewrite a spreadsheet completely when \code{append=TRUE}. It can overwrite certain values
if the table overlaps with existing values, though.
}
\section{Data Formats}{

The data formats' definitions are character strings which must correspond to the Excel data format
definition (detailed descriptions \href{https://support.office.com/en-us/article/Number-format-codes-5026bbd6-04bc-48cd-bf33-80f18b4eae68}{here}
and \href{http://www.exceltactics.com/definitive-guide-custom-number-formats-excel/}{here}).
Data format describes how a value will be shown in the spreadsheet, changing data format does not change the value itself.
\code{data.format} is a vector which defines the data formats for all variables in the table.
The parameters \code{digits} and \code{date.format} were introduced to define the format of
numeric and date variables in a convenient way.
For each variable, if corresponding \code{data.format} is NA, the value from \code{digits} or \code{date.format}
is used to define the format, depending on the variable class. If both values are NA or empty, no formatting 
is performed on the corresponding variable.
The lengths of \code{digits} and \code{date.format} must be either 1 (the values are recycled then)
or correspond to the number of, respectively, numeric or date variables.
The data format of separate cells can be modified by means of \code{customStyles}.
}

\section{Custom Styles}{

The cell style is a set of parameters defining the appearance of the cell in a spreadsheet,
including text color, text alignment, borders, filling, font, data format, and cell protection
(details in \code{\link[xlsx]{CellStyle}}). The style of single cells can be modified by means of
\code{customStyles}. \code{customStyles} must be a list of style definitions, each definition must
be a named list. Style definition comprises one required element \code{mask} which points out 
which cells are to be modified and one or more compulsory optional arguments defining the style.

\code{mask} must be a logical matrix in which TRUE corresponds to the cells to modify. The size of 
\code{mask} must take into account \code{row.names} and \code{col.names}. E.g., if \code{row.names=TRUE},
\code{ncol(mask)} must be \code{ncol(x)+1}, as the row names are written into a separate column.
For the convenience of mask specification a function \code{\link{mask}} was included into the package.

The following arguments describing the style are accepted: \code{dataFormat, alignment, border, fill, font, cellProtection}.
Each of them must be a named list with the arguments passed to the corresponding function. 
E.g., \code{alignment} is passed to the function \code{\link[xlsx]{Alignment}}.
Custom styles does not overwrite the style attributes which are not defined: 
\code{alignment=list(horizontal='ALIGN_CENTER')} will not affect the vertical alignment of the cell value.
See corresponding \code{\link[xlsx]{xlsx}} style functions for possible argument values.
}

\examples{
D <- replicate(10, rnorm(20))
D <- as.data.frame(D)

output <- lapply(D, function(x) mlth(Parametric = list(Mean = mean(x),
                                                       SD = sd(x)),
			                               `Non-parametric` = list(Median = median(x),
			                                                        MAD = mad(x))))
output <- do.call('rbind', output)
row.names(output) <- names(D)
output

## Another way to build such table
output2 <- sapply(D, function(x)
 			c(mean(x), sd(x), median(x), mad(x)))
output2 <- mlth(Parametric = list(Mean = output2[1, ], SD = output2[2, ]),
 			        `Non-parametric` = list(Median = output2[3, ], MAD = output2[4, ]),
				         row.names = names(D))
output2

## Write the output to an Excel file
write.mlth(output, file = 'example1.xlsx')
write.mlth(output, file = 'example1.xlsx', sheetName = 'Pretty table',
			      append = TRUE, digits = 2, apa = TRUE)
## Write with customized styles
write.mlth(output, file = 'example1.xlsx', sheetName = 'Pretty table 2',
			      append = TRUE, digits = 2, apa = TRUE,
			      customStyles = list(list(mask = !mask(output, c = 1, h = T, rn = T),
										                 alignment = list(horizontal = 'ALIGN_CENTER')),
							                  list(mask = mask(output, c = 1, h = T, rn = T),
										                 font = list(isBold = TRUE))))
write.mlth(output, file = 'example1.xlsx', sheetName = 'Pretty table 2',
			      append = TRUE, digits = 2, apa = TRUE, 
			      coord = c(13, 1), header = FALSE,
			      customStyles = list(list(mask = !mask(output, c = 1, h = F, rn = T),
										                 alignment = list(horizontal = 'ALIGN_CENTER')),
							                  list(mask = mask(output, c = 1, h = T, rn = T),
										                 font = list(isBold = TRUE))))

}
